{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\src\\\\components\\\\layout\\\\WeatherChart.js\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport { Chart } from \"primereact/chart\"; // import Media from 'react-media';\n\nimport MediaQuery from \"react-responsive\";\n\nfunction WeatherChart(_ref) {\n  var weatherState = _ref.weatherState;\n  var daily = null;\n  var data = null; // console.log('chart props', weather, isLoaded);\n\n  if (weatherState.isLoaded && !weatherState.isLoading) {\n    daily = weatherState.weather.daily; // console.log('daily', daily);\n\n    data = {\n      labels: daily.data.map(function (daily) {\n        return moment.unix(daily.time).format(\"ddd DD/MM\");\n      }),\n      datasets: [{\n        label: \"Temperature High\",\n        data: daily.data.map(function (daily) {\n          return daily.apparentTemperatureHigh;\n        }),\n        fill: false,\n        backgroundColor: \"#f7a800\",\n        borderColor: \"#f7a800\"\n      }, {\n        label: \"Temperature Low\",\n        data: daily.data.map(function (daily) {\n          return daily.apparentTemperatureLow;\n        }),\n        fill: false,\n        backgroundColor: \"#42A5F5\",\n        borderColor: \"#42A5F5\"\n      }]\n    }; // console.log('data', data);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(MediaQuery, {\n    maxWidth: 500,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, function (matches) {\n    if (matches) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, data !== null && React.createElement(Chart, {\n        type: \"line\",\n        data: data,\n        width: \"80vw\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, data !== null && React.createElement(Chart, {\n        type: \"line\",\n        data: data,\n        width: \"80vw\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    }\n  }));\n}\n\nexport default WeatherChart;","map":{"version":3,"sources":["C:\\Users\\shahnkha\\Documents\\GIT Apps\\dark-prime-weather-apo\\src\\components\\layout\\WeatherChart.js"],"names":["React","moment","Chart","MediaQuery","WeatherChart","weatherState","daily","data","isLoaded","isLoading","weather","labels","map","unix","time","format","datasets","label","apparentTemperatureHigh","fill","backgroundColor","borderColor","apparentTemperatureLow","matches"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;AAEA,SAASC,YAAT,OAAwC;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AACtC,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,IAAI,GAAG,IAAX,CAFsC,CAGtC;;AACA,MAAIF,YAAY,CAACG,QAAb,IAAyB,CAACH,YAAY,CAACI,SAA3C,EAAsD;AACpDH,IAAAA,KAAK,GAAGD,YAAY,CAACK,OAAb,CAAqBJ,KAA7B,CADoD,CAEpD;;AACAC,IAAAA,IAAI,GAAG;AACLI,MAAAA,MAAM,EAAEL,KAAK,CAACC,IAAN,CAAWK,GAAX,CAAe,UAAAN,KAAK;AAAA,eAC1BL,MAAM,CAACY,IAAP,CAAYP,KAAK,CAACQ,IAAlB,EAAwBC,MAAxB,CAA+B,WAA/B,CAD0B;AAAA,OAApB,CADH;AAILC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,kBADT;AAEEV,QAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,CAAWK,GAAX,CAAe,UAAAN,KAAK;AAAA,iBAAIA,KAAK,CAACY,uBAAV;AAAA,SAApB,CAFR;AAGEC,QAAAA,IAAI,EAAE,KAHR;AAIEC,QAAAA,eAAe,EAAE,SAJnB;AAKEC,QAAAA,WAAW,EAAE;AALf,OADQ,EAQR;AACEJ,QAAAA,KAAK,EAAE,iBADT;AAEEV,QAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,CAAWK,GAAX,CAAe,UAAAN,KAAK;AAAA,iBAAIA,KAAK,CAACgB,sBAAV;AAAA,SAApB,CAFR;AAGEH,QAAAA,IAAI,EAAE,KAHR;AAIEC,QAAAA,eAAe,EAAE,SAJnB;AAKEC,QAAAA,WAAW,EAAE;AALf,OARQ;AAJL,KAAP,CAHoD,CAwBpD;AACD;;AACD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAE,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAE,OAAO,EAAI;AACV,QAAIA,OAAJ,EAAa;AACX,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGhB,IAAI,KAAK,IAAT,IACC,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAEA,IAAzB;AAA+B,QAAA,KAAK,EAAC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADF;AAOD,KARD,MAQO;AACL,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,IAAI,KAAK,IAAT,IACC,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAEA,IAAzB;AAA+B,QAAA,KAAK,EAAC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADF;AAOD;AACF,GAnBH,CAdF,CADF;AAsCD;;AAED,eAAeH,YAAf","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Chart } from \"primereact/chart\";\r\n// import Media from 'react-media';\r\nimport MediaQuery from \"react-responsive\";\r\n\r\nfunction WeatherChart({ weatherState }) {\r\n  let daily = null;\r\n  let data = null;\r\n  // console.log('chart props', weather, isLoaded);\r\n  if (weatherState.isLoaded && !weatherState.isLoading) {\r\n    daily = weatherState.weather.daily;\r\n    // console.log('daily', daily);\r\n    data = {\r\n      labels: daily.data.map(daily =>\r\n        moment.unix(daily.time).format(\"ddd DD/MM\")\r\n      ),\r\n      datasets: [\r\n        {\r\n          label: \"Temperature High\",\r\n          data: daily.data.map(daily => daily.apparentTemperatureHigh),\r\n          fill: false,\r\n          backgroundColor: \"#f7a800\",\r\n          borderColor: \"#f7a800\"\r\n        },\r\n        {\r\n          label: \"Temperature Low\",\r\n          data: daily.data.map(daily => daily.apparentTemperatureLow),\r\n          fill: false,\r\n          backgroundColor: \"#42A5F5\",\r\n          borderColor: \"#42A5F5\"\r\n        }\r\n      ]\r\n    };\r\n    // console.log('data', data);\r\n  }\r\n  return (\r\n    <div>\r\n      {/* <Media query=\"(max-width: 500px)\">\r\n          {matches =>\r\n            matches ? (              \r\n            <div>      \r\n              {(data !== null) && <Chart type=\"line\" data={data} width=\"380px\" /> }\r\n            </div>\r\n            ) : (\r\n            <div>      \r\n              {(data !== null) && <Chart type=\"line\" data={data} width=\"500px\" /> }\r\n            </div>\r\n            )\r\n          }\r\n    </Media> */}\r\n      <MediaQuery maxWidth={500}>\r\n        {matches => {\r\n          if (matches) {\r\n            return (\r\n              <div>\r\n                {data !== null && (\r\n                  <Chart type=\"line\" data={data} width=\"80vw\" />\r\n                )}\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div>\r\n                {data !== null && (\r\n                  <Chart type=\"line\" data={data} width=\"80vw\" />\r\n                )}\r\n              </div>\r\n            );\r\n          }\r\n        }}\r\n      </MediaQuery>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherChart;\r\n"]},"metadata":{},"sourceType":"module"}