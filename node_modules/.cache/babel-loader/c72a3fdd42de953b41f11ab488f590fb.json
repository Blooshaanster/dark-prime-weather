{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\src\\\\components\\\\layout\\\\MapCard.js\";\nimport React, { Component } from 'react';\nimport ReactMapGL from 'react-map-gl';\n\nvar MapCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapCard, _Component);\n\n  function MapCard() {\n    _classCallCheck(this, MapCard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MapCard).apply(this, arguments));\n  }\n\n  _createClass(MapCard, [{\n    key: \"componentDidUpdate\",\n    //Update Viewport From Search Props(Geocoder)\n    value: function componentDidUpdate() {\n      if (this.props.weatherState.weather.latitude !== this.state.viewport.latitude && !this.props.weatherState.isLoading && typeof this.props.weatherState.weather.latitude !== 'undefined') {\n        // console.log('weatherstate map', this.props, this.state.viewport.latitude);\n        this.setPosition(this.props.weatherState.weather.latitude, this.props.weatherState.weather.longitude);\n      }\n    } //Update Viewport From Scroll\n\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(latitude, longitude) {\n      // const viewport = {...this.state.viewport, longitude: lat, latitude: lon};\n      // this.props.setLatLon(latitude, longitude);\n      this.setState(_objectSpread({}, this.state, {\n        viewport: _objectSpread({}, this.state.viewport, {\n          latitude: latitude,\n          longitude: longitude\n        })\n      })); // console.log('updating viewport from prop', this.state, latitude, longitude)\n    }\n  }, {\n    key: \"setViewport\",\n    value: function setViewport(viewport) {\n      // const viewport = {...this.state.viewport, longitude: lat, latitude: lon};\n      var latitude = viewport.latitude,\n          longitude = viewport.longitude;\n      this.props.setLatLon(latitude, longitude);\n      this.setState(_objectSpread({}, this.state, {\n        viewport: _objectSpread({}, this.state.viewport, {\n          latitude: latitude,\n          longitude: longitude\n        })\n      })); // console.log('updating viewport from map', this.state, latitude, longitude)\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      // let position = [this.state.viewport.latitude, this.state.viewport.longitude];\n      // let { weather } = this.props.weatherState;\n      // if(this.props.weatherState.isLoaded) {\n      //   position = [weather.latitude, weather.longitude];\n      //   // this.setPosition(position[0], position[1]);\n      // } \n      return React.createElement(ReactMapGL, {\n        latitude: this.state.viewport.latitude,\n        longitude: this.state.viewport.longitude,\n        zoom: 10,\n        width: \"75vw\",\n        height: \"60vh\" // scrollZoom={true}\n        // interactive={true}\n        // dragPan={true}\n        ,\n        onViewportChange: function onViewportChange(viewport) {\n          return _this.setViewport(viewport);\n        },\n        mapStyle: \"mapbox://styles/redvelocity/cjumbtame019l1ft8zigwi1cd\",\n        mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_KEY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MapCard;\n}(Component);\n\nexport { MapCard as default };","map":{"version":3,"sources":["C:\\Users\\shahnkha\\Documents\\GIT Apps\\dark-prime-weather-apo\\src\\components\\layout\\MapCard.js"],"names":["React","Component","ReactMapGL","MapCard","props","weatherState","weather","latitude","state","viewport","isLoading","setPosition","longitude","setState","setLatLon","setViewport","process","env","REACT_APP_MAPBOX_KEY"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;IAEqBC,O;;;;;;;;;;;;;AACnB;yCACqB;AACnB,UAAG,KAAKC,KAAL,CAAWC,YAAX,CAAwBC,OAAxB,CAAgCC,QAAhC,KAA6C,KAAKC,KAAL,CAAWC,QAAX,CAAoBF,QAAjE,IACI,CAAC,KAAKH,KAAL,CAAWC,YAAX,CAAwBK,SAD7B,IAEI,OAAO,KAAKN,KAAL,CAAWC,YAAX,CAAwBC,OAAxB,CAAgCC,QAAvC,KAAoD,WAF3D,EAEwE;AAEtE;AACA,aAAKI,WAAL,CAAiB,KAAKP,KAAL,CAAWC,YAAX,CAAwBC,OAAxB,CAAgCC,QAAjD,EAA2D,KAAKH,KAAL,CAAWC,YAAX,CAAwBC,OAAxB,CAAgCM,SAA3F;AACD;AACF,K,CACD;;;;gCACYL,Q,EAAUK,S,EAAW;AAC/B;AACA;AACA,WAAKC,QAAL,mBAAmB,KAAKL,KAAxB;AAA+BC,QAAAA,QAAQ,oBAAK,KAAKD,KAAL,CAAWC,QAAhB;AAA0BF,UAAAA,QAAQ,EAACA,QAAnC;AAA6CK,UAAAA,SAAS,EAACA;AAAvD;AAAvC,UAH+B,CAI/B;AACD;;;gCAEWH,Q,EAAU;AACpB;AADoB,UAEZF,QAFY,GAEYE,QAFZ,CAEZF,QAFY;AAAA,UAEFK,SAFE,GAEYH,QAFZ,CAEFG,SAFE;AAGpB,WAAKR,KAAL,CAAWU,SAAX,CAAqBP,QAArB,EAA+BK,SAA/B;AACA,WAAKC,QAAL,mBAAmB,KAAKL,KAAxB;AAA+BC,QAAAA,QAAQ,oBAAK,KAAKD,KAAL,CAAWC,QAAhB;AAA0BF,UAAAA,QAAQ,EAACA,QAAnC;AAA6CK,UAAAA,SAAS,EAACA;AAAvD;AAAvC,UAJoB,CAKpB;AACD;;;6BAEM;AAAA;;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aACA,oBAAC,UAAD;AACE,QAAA,QAAQ,EAAG,KAAKJ,KAAL,CAAWC,QAAX,CAAoBF,QADjC;AAEE,QAAA,SAAS,EAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBG,SAFlC;AAGE,QAAA,IAAI,EAAE,EAHR;AAIE,QAAA,KAAK,EAAC,MAJR;AAKE,QAAA,MAAM,EAAC,MALT,CAME;AACA;AACA;AARF;AASE,QAAA,gBAAgB,EAAE,0BAACH,QAAD;AAAA,iBAAc,KAAI,CAACM,WAAL,CAAiBN,QAAjB,CAAd;AAAA,SATpB;AAUE,QAAA,QAAQ,EAAC,uDAVX;AAWE,QAAA,oBAAoB,EAAEO,OAAO,CAACC,GAAR,CAAYC,oBAXpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA;AAwBF;;;;EA1DmCjB,S;;SAAhBE,O","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactMapGL from 'react-map-gl';\r\n\r\nexport default class MapCard extends Component {\r\n  //Update Viewport From Search Props(Geocoder)\r\n  componentDidUpdate() {\r\n    if(this.props.weatherState.weather.latitude !== this.state.viewport.latitude \r\n        && !this.props.weatherState.isLoading\r\n        && typeof this.props.weatherState.weather.latitude !== 'undefined') {\r\n      \r\n      // console.log('weatherstate map', this.props, this.state.viewport.latitude);\r\n      this.setPosition(this.props.weatherState.weather.latitude, this.props.weatherState.weather.longitude);\r\n    } \r\n  }\r\n  //Update Viewport From Scroll\r\n  setPosition(latitude, longitude) {\r\n    // const viewport = {...this.state.viewport, longitude: lat, latitude: lon};\r\n    // this.props.setLatLon(latitude, longitude);\r\n    this.setState({ ...this.state, viewport:{...this.state.viewport, latitude:latitude, longitude:longitude}});\r\n    // console.log('updating viewport from prop', this.state, latitude, longitude)\r\n  }\r\n\r\n  setViewport(viewport) {\r\n    // const viewport = {...this.state.viewport, longitude: lat, latitude: lon};\r\n    const { latitude, longitude } = viewport;\r\n    this.props.setLatLon(latitude, longitude);\r\n    this.setState({ ...this.state, viewport:{...this.state.viewport, latitude:latitude, longitude:longitude}});\r\n    // console.log('updating viewport from map', this.state, latitude, longitude)\r\n  }\r\n    \r\n render(){ \r\n    // let position = [this.state.viewport.latitude, this.state.viewport.longitude];\r\n    // let { weather } = this.props.weatherState;\r\n    // if(this.props.weatherState.isLoaded) {\r\n    //   position = [weather.latitude, weather.longitude];\r\n    //   // this.setPosition(position[0], position[1]);\r\n    // } \r\n    return (\r\n    <ReactMapGL\r\n      latitude= {this.state.viewport.latitude}\r\n      longitude= {this.state.viewport.longitude}\r\n      zoom={10}\r\n      width=\"75vw\"\r\n      height=\"60vh\"\r\n      // scrollZoom={true}\r\n      // interactive={true}\r\n      // dragPan={true}\r\n      onViewportChange={(viewport) => this.setViewport(viewport)}\r\n      mapStyle=\"mapbox://styles/redvelocity/cjumbtame019l1ft8zigwi1cd\"\r\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_KEY}\r\n    >\r\n      {/* <Marker \r\n        latitude= {this.state.viewport.longitude}\r\n        longitude= {this.state.viewport.longitude}\r\n        draggable= {false}\r\n        offsetTop= {-25}\r\n      >\r\n        <img src=\"https://img.icons8.com/color/32/000000/marker.png\" alt=\"\"/>\r\n      </Marker> */}\r\n    </ReactMapGL>\r\n  )\r\n }\r\n}"]},"metadata":{},"sourceType":"module"}