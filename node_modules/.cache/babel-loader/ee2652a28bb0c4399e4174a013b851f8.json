{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\src\\\\components\\\\layout\\\\WeatherSearch.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; // import * as opencage from 'opencage-api-client';\n\nimport PropTypes from 'prop-types'; // import {InputText} from 'primereact/inputtext';\n// import {Button} from 'primereact/button';\n\nimport { AutoComplete } from 'primereact/autocomplete';\n\nvar WeatherSearch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeatherSearch, _Component);\n\n  function WeatherSearch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WeatherSearch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WeatherSearch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      latitude: 12.9791198,\n      longitude: 77.5912997,\n      place: 'Bengaluru, India',\n      suggestions: null,\n      geoData: null\n    };\n\n    _this.onSearch = function (e) {\n      var api = encodeURI(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(_this.state.place, \".json?access_token=\").concat(process.env.REACT_APP_MAPBOX_KEY, \"&types=place\"));\n      axios.get(api).then(function (res) {\n        _this.setState({\n          suggestions: res.data.features.map(function (feature) {\n            return feature.place_name;\n          }),\n          geoData: res.data.features\n        }); // console.log('place state', this.state);\n\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.onSelect = function (e) {\n      var feature = _this.state.geoData.filter(function (feature) {\n        return feature.place_name === e.value;\n      });\n\n      _this.setState({\n        latitude: feature[0].geometry.coordinates[1],\n        longitude: feature[0].geometry.coordinates[0]\n      }); // console.log('selected co-ords',feature[0].geometry.coordinates);\n\n\n      _this.props.toggleLoading();\n\n      _this.props.performSearch(feature[0].geometry.coordinates[1], feature[0].geometry.coordinates[0]);\n    };\n\n    return _this;\n  }\n\n  _createClass(WeatherSearch, [{\n    key: \"componentDidMount\",\n    // onSearch = (e) => {\n    //     opencage.geocode({q: this.state.place, key: process.env.REACT_APP_OPENCAGE_KEY}).then(data => {\n    //         // console.log(JSON.stringify(data));\n    //         if (data.status.code === 200) {\n    //           if (data.results.length > 0) {\n    //             var place = data.results[0];\n    //             // console.log(place.formatted);\n    //             this.setState({ latitude: place.geometry.lat, longitude: place.geometry.lng  });\n    //             // console.log('geocode',this.state, place.geometry);\n    //             this.props.toggleLoading();\n    //             this.props.performSearch(this.state.latitude, this.state.longitude);\n    //             // console.log(place.annotations.timezone.name);\n    //           }\n    //         } else if (data.status.code === 402) {\n    //           console.log('hit free-trial daily limit');\n    //           console.log('become a customer: https://opencagedata.com/pricing'); \n    //         } else {\n    //           // other possible response codes:\n    //           // https://opencagedata.com/api#codes\n    //           console.log('error', data.status.message);\n    //         }\n    //       }).catch(error => {\n    //         console.log('error', error.message);\n    //       });\n    // }\n    value: function componentDidMount() {\n      if (!this.props.isLoaded) {\n        this.props.toggleLoading();\n        this.props.performSearch(this.state.latitude, this.state.longitude);\n      }\n\n      ;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          maxWidth: '500px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          margin: '5px 5px 0px 5px',\n          fontWeight: 'bold'\n        },\n        htmlFor: \"place\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Enter Place Name\"), React.createElement(AutoComplete, {\n        style: {\n          margin: '5px'\n        },\n        value: this.state.place,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            place: e.target.value\n          });\n        },\n        suggestions: this.state.suggestions,\n        completeMethod: this.onSearch,\n        onSelect: this.onSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WeatherSearch;\n}(Component);\n\nexport { WeatherSearch as default };\nWeatherSearch.propTypes = {\n  performSearch: PropTypes.func.isRequired,\n  toggleLoading: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired\n};","map":{"version":3,"sources":["C:\\Users\\shahnkha\\Documents\\GIT Apps\\dark-prime-weather-apo\\src\\components\\layout\\WeatherSearch.js"],"names":["React","Component","axios","PropTypes","AutoComplete","WeatherSearch","state","latitude","longitude","place","suggestions","geoData","onSearch","e","api","encodeURI","process","env","REACT_APP_MAPBOX_KEY","get","then","res","setState","data","features","map","feature","place_name","catch","error","console","log","onSelect","filter","value","geometry","coordinates","props","toggleLoading","performSearch","isLoaded","display","flexDirection","justifyContent","maxWidth","margin","fontWeight","target","propTypes","func","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// import * as opencage from 'opencage-api-client';\r\nimport PropTypes from 'prop-types';\r\n// import {InputText} from 'primereact/inputtext';\r\n// import {Button} from 'primereact/button';\r\nimport {AutoComplete} from 'primereact/autocomplete';\r\n\r\nexport default class WeatherSearch extends Component {\r\n    state = { \r\n        latitude: 12.9791198,\r\n        longitude: 77.5912997,\r\n        place:'Bengaluru, India',\r\n        suggestions: null,\r\n        geoData: null\r\n    };\r\n\r\n    // onSearch = (e) => {\r\n    //     opencage.geocode({q: this.state.place, key: process.env.REACT_APP_OPENCAGE_KEY}).then(data => {\r\n    //         // console.log(JSON.stringify(data));\r\n    //         if (data.status.code === 200) {\r\n    //           if (data.results.length > 0) {\r\n    //             var place = data.results[0];\r\n    //             // console.log(place.formatted);\r\n    //             this.setState({ latitude: place.geometry.lat, longitude: place.geometry.lng  });\r\n    //             // console.log('geocode',this.state, place.geometry);\r\n    //             this.props.toggleLoading();\r\n    //             this.props.performSearch(this.state.latitude, this.state.longitude);\r\n    //             // console.log(place.annotations.timezone.name);\r\n    //           }\r\n    //         } else if (data.status.code === 402) {\r\n    //           console.log('hit free-trial daily limit');\r\n    //           console.log('become a customer: https://opencagedata.com/pricing'); \r\n    //         } else {\r\n    //           // other possible response codes:\r\n    //           // https://opencagedata.com/api#codes\r\n    //           console.log('error', data.status.message);\r\n    //         }\r\n    //       }).catch(error => {\r\n    //         console.log('error', error.message);\r\n    //       });\r\n    // }\r\n\r\n    componentDidMount() {\r\n      if(!this.props.isLoaded) {\r\n        this.props.toggleLoading();\r\n        this.props.performSearch(this.state.latitude, this.state.longitude);\r\n      };\r\n    }\r\n\r\n    onSearch = (e) => {\r\n      const api = encodeURI(`https://api.mapbox.com/geocoding/v5/mapbox.places/${this.state.place}.json?access_token=${process.env.REACT_APP_MAPBOX_KEY}&types=place`)\r\n      axios.get(api)\r\n        .then(res => {\r\n          this.setState({suggestions: res.data.features.map((feature) => feature.place_name), geoData: res.data.features})\r\n          // console.log('place state', this.state);\r\n        }).catch((error) => {\r\n          console.log(error);\r\n        })\r\n    }\r\n\r\n    onSelect = (e) => {\r\n      const feature = this.state.geoData.filter((feature) => feature.place_name === e.value);\r\n      this.setState({latitude:feature[0].geometry.coordinates[1], longitude:feature[0].geometry.coordinates[0]});\r\n      // console.log('selected co-ords',feature[0].geometry.coordinates);\r\n      this.props.toggleLoading();\r\n      this.props.performSearch(feature[0].geometry.coordinates[1], feature[0].geometry.coordinates[0]);\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', maxWidth: '500px'}} >\r\n        {/* <span className=\"p-float-label\"   > */}\r\n        <label \r\n          style={{margin: '5px 5px 0px 5px', fontWeight: 'bold'}}\r\n          htmlFor=\"place\">Enter Place Name</label>\r\n        <AutoComplete \r\n          style={{margin: '5px'}}\r\n          value={this.state.place} \r\n          onChange={(e) => this.setState({place: e.target.value})}\r\n          suggestions={this.state.suggestions} \r\n          completeMethod={this.onSearch}\r\n          onSelect={this.onSelect} />\r\n        {/* <InputText \r\n              style={{flex: '5'}}\r\n              placeholder=\"Enter Place Name\" \r\n              id=\"place\"\r\n              value={this.state.place} \r\n              onChange={(e) => this.setState({place: e.target.value})}    \r\n              /> */}\r\n              {/* <label htmlFor=\"place\">Enter Place Name</label>\r\n        </span> */}\r\n        {/* <Button \r\n              style={{flex: '4'}}\r\n              label=\"Get Weather\" \r\n              onClick={this.onSearchv2} /> */}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nWeatherSearch.propTypes = {\r\n  performSearch: PropTypes.func.isRequired,\r\n  toggleLoading: PropTypes.func.isRequired,\r\n  isLoaded: PropTypes.bool.isRequired\r\n}"]},"metadata":{},"sourceType":"module"}