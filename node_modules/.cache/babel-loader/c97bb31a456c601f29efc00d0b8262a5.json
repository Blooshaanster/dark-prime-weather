{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\src\\\\components\\\\layout\\\\WeatherSearch.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types'; // import {InputText} from 'primereact/inputtext';\n// import {Button} from 'primereact/button';\n\nimport { AutoComplete } from 'primereact/autocomplete';\n\nvar WeatherSearch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeatherSearch, _Component);\n\n  function WeatherSearch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WeatherSearch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WeatherSearch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      //hold gps location for proximity\n      latitude: null,\n      longitude: null,\n      place: '',\n      suggestions: null,\n      features: null\n    };\n\n    _this.loadSuggestions = function (e) {\n      var api;\n      if (_this.state.latitude !== null) api = encodeURI(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(_this.state.place, \".json?access_token=\").concat(process.env.REACT_APP_MAPBOX_KEY, \"&types=place&proximity=\").concat(_this.state.longitude, \",\").concat(_this.state.latitude, \"&language=en\"));else api = encodeURI(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(_this.state.place, \".json?access_token=\").concat(process.env.REACT_APP_MAPBOX_KEY, \"&types=place&language=en\"));\n      axios.get(api).then(function (res) {\n        if (res.data.features.length !== 0) {\n          _this.setState({\n            suggestions: res.data.features.map(function (feature) {\n              return feature.place_name;\n            }),\n            features: res.data.features\n          }); // console.log('place state', this.state);\n\n        } else _this.setState(_objectSpread({}, _this.state, {\n          features: null,\n          suggestions: ['Place Not Found']\n        }));\n      }).catch(function (error) {\n        console.log(error);\n      }); // const api = encodeURI(`https://api.opencagedata.com/geocode/v1/json?q=${this.state.place}&key=${process.env.REACT_APP_OPENCAGE_KEY}&proximity=${this.state.latitude}, ${this.state.longitude}&language=en-in&limit=5&min_confidence=1&no_annotations=1&abbrv=1`)\n      // axios.get(api)\n      //   .then(res => {\n      //     if(res.data.results.length !== 0) {\n      //       this.setState(\n      //         {suggestions: res.data.results.map((feature) => feature.formatted), features: res.data.results})\n      //     // console.log('place state', res.data.results.length);\n      //     } else this.setState({ ...this.state, fetaures:null, suggestions: ['Place Not Found'] })\n      //   }).catch((error) => {\n      //     console.log(error);\n      //   })\n    };\n\n    _this.onSelect = function (e) {\n      if (_this.state.features !== null && _this.state.features !== undefined) {\n        var _this$props = _this.props,\n            toggleLoading = _this$props.toggleLoading,\n            performSearch = _this$props.performSearch;\n\n        var feature = _this.state.features.filter(function (feature) {\n          return feature.place_name === e.value;\n        });\n\n        if (feature.length !== 0) {\n          // this.setState({latitude:feature[0].geometry.coordinates[1], longitude:feature[0].geometry.coordinates[0]});\n          // console.log('selected co-ords',feature[0].geometry.lat, latitude:feature[0].geometry.lat, this.state);\n          toggleLoading();\n          performSearch(feature[0].geometry.coordinates[1], feature[0].geometry.coordinates[0]);\n        } else _this.setState({\n          place: ''\n        });\n      } else _this.setState({\n        place: ''\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(WeatherSearch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          isLoaded = _this$props2.isLoaded,\n          toggleLoading = _this$props2.toggleLoading,\n          performSearch = _this$props2.performSearch;\n\n      if (!isLoaded) {\n        if (\"geolocation\" in navigator) {\n          /* geolocation is available */\n          navigator.geolocation.getCurrentPosition(function (position) {\n            _this2.setState({\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude\n            });\n\n            toggleLoading();\n            performSearch(position.coords.latitude, position.coords.longitude);\n          });\n        } else {\n          /* geolocation IS NOT available */\n        }\n      }\n\n      ;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          width: '500px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          margin: '5px 5px 0px 5px',\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Enter Place Name\"), React.createElement(AutoComplete, {\n        inputStyle: {\n          margin: '2px',\n          width: '300px'\n        },\n        style: {\n          margin: '5px'\n        },\n        placeholder: \"Place\",\n        value: this.state.place,\n        onChange: function onChange(e) {\n          return _this3.setState({\n            place: e.target.value\n          });\n        },\n        suggestions: this.state.suggestions,\n        completeMethod: this.loadSuggestions,\n        onSelect: this.onSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WeatherSearch;\n}(Component);\n\nexport { WeatherSearch as default };\nWeatherSearch.propTypes = {\n  performSearch: PropTypes.func.isRequired,\n  toggleLoading: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired\n};","map":{"version":3,"sources":["C:\\Users\\shahnkha\\Documents\\GIT Apps\\dark-prime-weather-apo\\src\\components\\layout\\WeatherSearch.js"],"names":["React","Component","axios","PropTypes","AutoComplete","WeatherSearch","state","latitude","longitude","place","suggestions","features","loadSuggestions","e","api","encodeURI","process","env","REACT_APP_MAPBOX_KEY","get","then","res","data","length","setState","map","feature","place_name","catch","error","console","log","onSelect","undefined","props","toggleLoading","performSearch","filter","value","geometry","coordinates","isLoaded","navigator","geolocation","getCurrentPosition","position","coords","display","flexDirection","justifyContent","alignItems","width","margin","fontWeight","target","propTypes","func","isRequired","bool"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;AACA;;AACA,SAAQC,YAAR,QAA2B,yBAA3B;;IAEqBC,a;;;;;;;;;;;;;;;;;UACjBC,K,GAAQ;AACN;AACEC,MAAAA,QAAQ,EAAE,IAFN;AAGJC,MAAAA,SAAS,EAAE,IAHP;AAIJC,MAAAA,KAAK,EAAC,EAJF;AAKJC,MAAAA,WAAW,EAAE,IALT;AAMJC,MAAAA,QAAQ,EAAE;AANN,K;;UAyBRC,e,GAAkB,UAACC,CAAD,EAAO;AACvB,UAAIC,GAAJ;AACA,UAAG,MAAKR,KAAL,CAAWC,QAAX,KAAwB,IAA3B,EACAO,GAAG,GAAGC,SAAS,6DAAsD,MAAKT,KAAL,CAAWG,KAAjE,gCAA4FO,OAAO,CAACC,GAAR,CAAYC,oBAAxG,oCAAsJ,MAAKZ,KAAL,CAAWE,SAAjK,cAA8K,MAAKF,KAAL,CAAWC,QAAzL,kBAAf,CADA,KAEKO,GAAG,GAAGC,SAAS,6DAAsD,MAAKT,KAAL,CAAWG,KAAjE,gCAA4FO,OAAO,CAACC,GAAR,CAAYC,oBAAxG,8BAAf;AACLhB,MAAAA,KAAK,CAACiB,GAAN,CAAUL,GAAV,EACGM,IADH,CACQ,UAAAC,GAAG,EAAI;AACX,YAAGA,GAAG,CAACC,IAAJ,CAASX,QAAT,CAAkBY,MAAlB,KAA6B,CAAhC,EAAmC;AACnC,gBAAKC,QAAL,CAAc;AAACd,YAAAA,WAAW,EAAEW,GAAG,CAACC,IAAJ,CAASX,QAAT,CAAkBc,GAAlB,CAAsB,UAACC,OAAD;AAAA,qBAAaA,OAAO,CAACC,UAArB;AAAA,aAAtB,CAAd;AAAsEhB,YAAAA,QAAQ,EAAEU,GAAG,CAACC,IAAJ,CAASX;AAAzF,WAAd,EADmC,CAEnC;;AACD,SAHC,MAGK,MAAKa,QAAL,mBAAmB,MAAKlB,KAAxB;AAA+BK,UAAAA,QAAQ,EAAC,IAAxC;AAA8CD,UAAAA,WAAW,EAAE,CAAC,iBAAD;AAA3D;AACN,OANH,EAMKkB,KANL,CAMW,UAACC,KAAD,EAAW;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARH,EALuB,CAevB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,K;;UAEDG,Q,GAAW,UAACnB,CAAD,EAAO;AAChB,UAAG,MAAKP,KAAL,CAAWK,QAAX,KAAwB,IAAxB,IAAgC,MAAKL,KAAL,CAAWK,QAAX,KAAwBsB,SAA3D,EAAsE;AAAA,0BAC5B,MAAKC,KADuB;AAAA,YAC5DC,aAD4D,eAC5DA,aAD4D;AAAA,YAC7CC,aAD6C,eAC7CA,aAD6C;;AAEpE,YAAMV,OAAO,GAAG,MAAKpB,KAAL,CAAWK,QAAX,CAAoB0B,MAApB,CAA2B,UAACX,OAAD;AAAA,iBAAaA,OAAO,CAACC,UAAR,KAAuBd,CAAC,CAACyB,KAAtC;AAAA,SAA3B,CAAhB;;AACA,YAAGZ,OAAO,CAACH,MAAR,KAAmB,CAAtB,EAAyB;AACvB;AACA;AACAY,UAAAA,aAAa;AACbC,UAAAA,aAAa,CAACV,OAAO,CAAC,CAAD,CAAP,CAAWa,QAAX,CAAoBC,WAApB,CAAgC,CAAhC,CAAD,EAAqCd,OAAO,CAAC,CAAD,CAAP,CAAWa,QAAX,CAAoBC,WAApB,CAAgC,CAAhC,CAArC,CAAb;AACD,SALD,MAKO,MAAKhB,QAAL,CAAc;AAACf,UAAAA,KAAK,EAAE;AAAR,SAAd;AACR,OATD,MASO,MAAKe,QAAL,CAAc;AAACf,QAAAA,KAAK,EAAE;AAAR,OAAd;AACR,K;;;;;;;wCAvDmB;AAAA;;AAAA,yBACgC,KAAKyB,KADrC;AAAA,UACVO,QADU,gBACVA,QADU;AAAA,UACAN,aADA,gBACAA,aADA;AAAA,UACeC,aADf,gBACeA,aADf;;AAElB,UAAG,CAACK,QAAJ,EAAc;AACZ,YAAI,iBAAiBC,SAArB,EAAgC;AAC9B;AACAA,UAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,QAAD,EAAc;AACrD,YAAA,MAAI,CAACrB,QAAL,CAAc;AAAEjB,cAAAA,QAAQ,EAACsC,QAAQ,CAACC,MAAT,CAAgBvC,QAA3B;AAAqCC,cAAAA,SAAS,EAACqC,QAAQ,CAACC,MAAT,CAAgBtC;AAA/D,aAAd;;AACA2B,YAAAA,aAAa;AACbC,YAAAA,aAAa,CAACS,QAAQ,CAACC,MAAT,CAAgBvC,QAAjB,EAA2BsC,QAAQ,CAACC,MAAT,CAAgBtC,SAA3C,CAAb;AACD,WAJD;AAKD,SAPD,MAOO;AACL;AACD;AACF;;AAAA;AACF;;;6BA2CQ;AAAA;;AACT,aACI;AAAK,QAAA,KAAK,EAAE;AAAEuC,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,aAAa,EAAE,QAAlC;AAA4CC,UAAAA,cAAc,EAAE,QAA5D;AAAsEC,UAAAA,UAAU,EAAE,QAAlF;AAA4FC,UAAAA,KAAK,EAAE;AAAnG,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA;AACE,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAE,iBAAT;AAA4BC,UAAAA,UAAU,EAAE;AAAxC,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFA,EAIA,oBAAC,YAAD;AACE,QAAA,UAAU,EAAE;AAACD,UAAAA,MAAM,EAAE,KAAT;AAAgBD,UAAAA,KAAK,EAAE;AAAvB,SADd;AAEE,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAE;AAAT,SAFT;AAGE,QAAA,WAAW,EAAC,OAHd;AAIE,QAAA,KAAK,EAAE,KAAK9C,KAAL,CAAWG,KAJpB;AAKE,QAAA,QAAQ,EAAE,kBAACI,CAAD;AAAA,iBAAO,MAAI,CAACW,QAAL,CAAc;AAACf,YAAAA,KAAK,EAAEI,CAAC,CAACyC,MAAF,CAAShB;AAAjB,WAAd,CAAP;AAAA,SALZ;AAME,QAAA,WAAW,EAAE,KAAKhC,KAAL,CAAWI,WAN1B;AAOE,QAAA,cAAc,EAAE,KAAKE,eAPvB;AAQE,QAAA,QAAQ,EAAE,KAAKoB,QARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJA,CADJ;AA6BD;;;;EAjGwC/B,S;;SAAtBI,a;AAoGrBA,aAAa,CAACkD,SAAd,GAA0B;AACxBnB,EAAAA,aAAa,EAAEjC,SAAS,CAACqD,IAAV,CAAeC,UADN;AAExBtB,EAAAA,aAAa,EAAEhC,SAAS,CAACqD,IAAV,CAAeC,UAFN;AAGxBhB,EAAAA,QAAQ,EAAEtC,SAAS,CAACuD,IAAV,CAAeD;AAHD,CAA1B","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\n// import {InputText} from 'primereact/inputtext';\r\n// import {Button} from 'primereact/button';\r\nimport {AutoComplete} from 'primereact/autocomplete';\r\n\r\nexport default class WeatherSearch extends Component {\r\n    state = { \r\n      //hold gps location for proximity\r\n        latitude: null,\r\n        longitude: null,\r\n        place:'',\r\n        suggestions: null,\r\n        features: null\r\n    };\r\n\r\n    componentDidMount() {\r\n      const { isLoaded, toggleLoading, performSearch} = this.props;\r\n      if(!isLoaded) {\r\n        if (\"geolocation\" in navigator) {\r\n          /* geolocation is available */\r\n          navigator.geolocation.getCurrentPosition((position) => {\r\n            this.setState({ latitude:position.coords.latitude, longitude:position.coords.longitude });\r\n            toggleLoading();\r\n            performSearch(position.coords.latitude, position.coords.longitude);\r\n          });\r\n        } else {\r\n          /* geolocation IS NOT available */\r\n        }\r\n      };\r\n    }\r\n\r\n    loadSuggestions = (e) => {\r\n      let api;\r\n      if(this.state.latitude !== null )\r\n      api = encodeURI(`https://api.mapbox.com/geocoding/v5/mapbox.places/${this.state.place}.json?access_token=${process.env.REACT_APP_MAPBOX_KEY}&types=place&proximity=${this.state.longitude},${this.state.latitude}&language=en`)\r\n      else api = encodeURI(`https://api.mapbox.com/geocoding/v5/mapbox.places/${this.state.place}.json?access_token=${process.env.REACT_APP_MAPBOX_KEY}&types=place&language=en`);\r\n      axios.get(api)\r\n        .then(res => {\r\n          if(res.data.features.length !== 0) {\r\n          this.setState({suggestions: res.data.features.map((feature) => feature.place_name), features: res.data.features})\r\n          // console.log('place state', this.state);\r\n        } else this.setState({ ...this.state, features:null, suggestions: ['Place Not Found'] })\r\n        }).catch((error) => {\r\n          console.log(error);\r\n        })\r\n      \r\n      // const api = encodeURI(`https://api.opencagedata.com/geocode/v1/json?q=${this.state.place}&key=${process.env.REACT_APP_OPENCAGE_KEY}&proximity=${this.state.latitude}, ${this.state.longitude}&language=en-in&limit=5&min_confidence=1&no_annotations=1&abbrv=1`)\r\n      // axios.get(api)\r\n      //   .then(res => {\r\n      //     if(res.data.results.length !== 0) {\r\n      //       this.setState(\r\n      //         {suggestions: res.data.results.map((feature) => feature.formatted), features: res.data.results})\r\n      //     // console.log('place state', res.data.results.length);\r\n      //     } else this.setState({ ...this.state, fetaures:null, suggestions: ['Place Not Found'] })\r\n      //   }).catch((error) => {\r\n      //     console.log(error);\r\n      //   })\r\n    }\r\n\r\n    onSelect = (e) => {\r\n      if(this.state.features !== null && this.state.features !== undefined) {\r\n        const { toggleLoading, performSearch} = this.props;\r\n        const feature = this.state.features.filter((feature) => feature.place_name === e.value);\r\n        if(feature.length !== 0) {\r\n          // this.setState({latitude:feature[0].geometry.coordinates[1], longitude:feature[0].geometry.coordinates[0]});\r\n          // console.log('selected co-ords',feature[0].geometry.lat, latitude:feature[0].geometry.lat, this.state);\r\n          toggleLoading();\r\n          performSearch(feature[0].geometry.coordinates[1], feature[0].geometry.coordinates[0]);\r\n        } else this.setState({place: ''})\r\n      } else this.setState({place: ''})\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', width: '500px'}} >\r\n        {/* <span className=\"p-float-label\"   > */}\r\n        <label \r\n          style={{margin: '5px 5px 0px 5px', fontWeight: 'bold'}}>Enter Place Name</label>\r\n        <AutoComplete \r\n          inputStyle={{margin: '2px', width: '300px'}}\r\n          style={{margin: '5px'}}\r\n          placeholder=\"Place\"\r\n          value={this.state.place} \r\n          onChange={(e) => this.setState({place: e.target.value})}\r\n          suggestions={this.state.suggestions} \r\n          completeMethod={this.loadSuggestions}\r\n          onSelect={this.onSelect} />\r\n        {/* <InputText \r\n              style={{flex: '5'}}\r\n              placeholder=\"Enter Place Name\" \r\n              id=\"place\"\r\n              value={this.state.place} \r\n              onChange={(e) => this.setState({place: e.target.value})}    \r\n              /> */}\r\n              {/* <label htmlFor=\"place\">Enter Place Name</label>\r\n        </span> */}\r\n        {/* <Button \r\n              style={{flex: '4'}}\r\n              label=\"Get Weather\" \r\n              onClick={this.onSearchv2} /> */}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nWeatherSearch.propTypes = {\r\n  performSearch: PropTypes.func.isRequired,\r\n  toggleLoading: PropTypes.func.isRequired,\r\n  isLoaded: PropTypes.bool.isRequired\r\n}"]},"metadata":{},"sourceType":"module"}