{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shahnkha\\\\Documents\\\\GIT Apps\\\\dark-prime-weather-apo\\\\src\\\\components\\\\layout\\\\WeatherSearch.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\"; // import {InputText} from 'primereact/inputtext';\n// import {Button} from 'primereact/button';\n\nimport { AutoComplete } from \"primereact/autocomplete\";\n\nvar WeatherSearch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeatherSearch, _Component);\n\n  function WeatherSearch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WeatherSearch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WeatherSearch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      //hold gps location for proximity\n      latitude: null,\n      longitude: null,\n      place: \"\",\n      suggestions: null,\n      features: null\n    };\n\n    _this.loadSuggestions = function (e) {\n      var api;\n      if (_this.state.latitude !== null) api = encodeURI(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(_this.state.place, \".json?access_token=\").concat(process.env.REACT_APP_MAPBOX_KEY, \"&types=place,locality&proximity=\").concat(_this.state.longitude, \",\").concat(_this.state.latitude, \"&language=en\"));else api = encodeURI(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(_this.state.place, \".json?access_token=\").concat(process.env.REACT_APP_MAPBOX_KEY, \"&types=place,locality&language=en\"));\n      axios.get(api).then(function (res) {\n        if (res.data.features.length !== 0) {\n          _this.setState({\n            suggestions: res.data.features.map(function (feature) {\n              return feature.place_name;\n            }),\n            features: res.data.features\n          }); // console.log('place state', this.state);\n\n        } else _this.setState(_objectSpread({}, _this.state, {\n          features: null,\n          suggestions: [\"Place Not Found\"]\n        }));\n      }).catch(function (error) {\n        console.log(error);\n      }); // const api = encodeURI(`https://api.opencagedata.com/geocode/v1/json?q=${this.state.place}&key=${process.env.REACT_APP_OPENCAGE_KEY}&proximity=${this.state.latitude}, ${this.state.longitude}&language=en-in&limit=5&min_confidence=1&no_annotations=1&abbrv=1`)\n      // axios.get(api)\n      //   .then(res => {\n      //     if(res.data.results.length !== 0) {\n      //       this.setState(\n      //         {suggestions: res.data.results.map((feature) => feature.formatted), features: res.data.results})\n      //     // console.log('place state', res.data.results.length);\n      //     } else this.setState({ ...this.state, fetaures:null, suggestions: ['Place Not Found'] })\n      //   }).catch((error) => {\n      //     console.log(error);\n      //   })\n    };\n\n    _this.onSelect = function (e) {\n      if (_this.state.features !== null && _this.state.features !== undefined) {\n        var _this$props = _this.props,\n            toggleLoading = _this$props.toggleLoading,\n            performSearch = _this$props.performSearch;\n\n        var feature = _this.state.features.filter(function (feature) {\n          return feature.place_name === e.value;\n        });\n\n        if (feature.length !== 0) {\n          // this.setState({latitude:feature[0].geometry.coordinates[1], longitude:feature[0].geometry.coordinates[0]});\n          // console.log('selected co-ords',feature[0].geometry.lat, latitude:feature[0].geometry.lat, this.state);\n          toggleLoading();\n          performSearch(feature[0].geometry.coordinates[1], feature[0].geometry.coordinates[0]);\n        } else _this.setState({\n          place: \"\"\n        });\n      } else _this.setState({\n        place: \"\"\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(WeatherSearch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          isLoaded = _this$props2.isLoaded,\n          toggleLoading = _this$props2.toggleLoading,\n          performSearch = _this$props2.performSearch;\n\n      if (!isLoaded) {\n        if (\"geolocation\" in navigator) {\n          /* geolocation is available */\n          navigator.geolocation.getCurrentPosition(function (position) {\n            _this2.setState({\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude\n            });\n\n            toggleLoading();\n            performSearch(position.coords.latitude, position.coords.longitude);\n          });\n        } else {\n          /* geolocation IS NOT available */\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"weather-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Enter Place Name\"), React.createElement(AutoComplete, {\n        inputStyle: {\n          marginTop: \"2px\",\n          width: \"300px\"\n        },\n        placeholder: \"Place\",\n        value: this.state.place,\n        onChange: function onChange(e) {\n          return _this3.setState({\n            place: e.target.value\n          });\n        },\n        suggestions: this.state.suggestions,\n        completeMethod: this.loadSuggestions,\n        onSelect: this.onSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WeatherSearch;\n}(Component);\n\nexport { WeatherSearch as default };\nWeatherSearch.propTypes = {\n  performSearch: PropTypes.func.isRequired,\n  toggleLoading: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired\n};","map":{"version":3,"sources":["C:\\Users\\shahnkha\\Documents\\GIT Apps\\dark-prime-weather-apo\\src\\components\\layout\\WeatherSearch.js"],"names":["React","Component","axios","PropTypes","AutoComplete","WeatherSearch","state","latitude","longitude","place","suggestions","features","loadSuggestions","e","api","encodeURI","process","env","REACT_APP_MAPBOX_KEY","get","then","res","data","length","setState","map","feature","place_name","catch","error","console","log","onSelect","undefined","props","toggleLoading","performSearch","filter","value","geometry","coordinates","isLoaded","navigator","geolocation","getCurrentPosition","position","coords","fontWeight","marginTop","width","target","propTypes","func","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\n// import {InputText} from 'primereact/inputtext';\r\n// import {Button} from 'primereact/button';\r\nimport { AutoComplete } from \"primereact/autocomplete\";\r\n\r\nexport default class WeatherSearch extends Component {\r\n  state = {\r\n    //hold gps location for proximity\r\n    latitude: null,\r\n    longitude: null,\r\n    place: \"\",\r\n    suggestions: null,\r\n    features: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { isLoaded, toggleLoading, performSearch } = this.props;\r\n    if (!isLoaded) {\r\n      if (\"geolocation\" in navigator) {\r\n        /* geolocation is available */\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          this.setState({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude\r\n          });\r\n          toggleLoading();\r\n          performSearch(position.coords.latitude, position.coords.longitude);\r\n        });\r\n      } else {\r\n        /* geolocation IS NOT available */\r\n      }\r\n    }\r\n  }\r\n\r\n  loadSuggestions = e => {\r\n    let api;\r\n    if (this.state.latitude !== null)\r\n      api = encodeURI(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${\r\n          this.state.place\r\n        }.json?access_token=${\r\n          process.env.REACT_APP_MAPBOX_KEY\r\n        }&types=place,locality&proximity=${this.state.longitude},${\r\n          this.state.latitude\r\n        }&language=en`\r\n      );\r\n    else\r\n      api = encodeURI(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${\r\n          this.state.place\r\n        }.json?access_token=${\r\n          process.env.REACT_APP_MAPBOX_KEY\r\n        }&types=place,locality&language=en`\r\n      );\r\n    axios\r\n      .get(api)\r\n      .then(res => {\r\n        if (res.data.features.length !== 0) {\r\n          this.setState({\r\n            suggestions: res.data.features.map(feature => feature.place_name),\r\n            features: res.data.features\r\n          });\r\n          // console.log('place state', this.state);\r\n        } else\r\n          this.setState({\r\n            ...this.state,\r\n            features: null,\r\n            suggestions: [\"Place Not Found\"]\r\n          });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    // const api = encodeURI(`https://api.opencagedata.com/geocode/v1/json?q=${this.state.place}&key=${process.env.REACT_APP_OPENCAGE_KEY}&proximity=${this.state.latitude}, ${this.state.longitude}&language=en-in&limit=5&min_confidence=1&no_annotations=1&abbrv=1`)\r\n    // axios.get(api)\r\n    //   .then(res => {\r\n    //     if(res.data.results.length !== 0) {\r\n    //       this.setState(\r\n    //         {suggestions: res.data.results.map((feature) => feature.formatted), features: res.data.results})\r\n    //     // console.log('place state', res.data.results.length);\r\n    //     } else this.setState({ ...this.state, fetaures:null, suggestions: ['Place Not Found'] })\r\n    //   }).catch((error) => {\r\n    //     console.log(error);\r\n    //   })\r\n  };\r\n\r\n  onSelect = e => {\r\n    if (this.state.features !== null && this.state.features !== undefined) {\r\n      const { toggleLoading, performSearch } = this.props;\r\n      const feature = this.state.features.filter(\r\n        feature => feature.place_name === e.value\r\n      );\r\n      if (feature.length !== 0) {\r\n        // this.setState({latitude:feature[0].geometry.coordinates[1], longitude:feature[0].geometry.coordinates[0]});\r\n        // console.log('selected co-ords',feature[0].geometry.lat, latitude:feature[0].geometry.lat, this.state);\r\n        toggleLoading();\r\n        performSearch(\r\n          feature[0].geometry.coordinates[1],\r\n          feature[0].geometry.coordinates[0]\r\n        );\r\n      } else this.setState({ place: \"\" });\r\n    } else this.setState({ place: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"weather-search\">\r\n        {/* <span className=\"p-float-label\"   > */}\r\n        <label style={{ fontWeight: \"bold\" }}>Enter Place Name</label>\r\n        <AutoComplete\r\n          inputStyle={{ marginTop: \"2px\", width: \"300px\" }}\r\n          placeholder=\"Place\"\r\n          value={this.state.place}\r\n          onChange={e => this.setState({ place: e.target.value })}\r\n          suggestions={this.state.suggestions}\r\n          completeMethod={this.loadSuggestions}\r\n          onSelect={this.onSelect}\r\n        />\r\n        {/* <InputText \r\n              placeholder=\"Enter Place Name\" \r\n              id=\"place\"\r\n              value={this.state.place} \r\n              onChange={(e) => this.setState({place: e.target.value})}    \r\n              /> */}\r\n        {/* <label htmlFor=\"place\">Enter Place Name</label>\r\n        </span> */}\r\n        {/* <Button \r\n              label=\"Get Weather\" \r\n              onClick={this.onSearchv2} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nWeatherSearch.propTypes = {\r\n  performSearch: PropTypes.func.isRequired,\r\n  toggleLoading: PropTypes.func.isRequired,\r\n  isLoaded: PropTypes.bool.isRequired\r\n};\r\n"]},"metadata":{},"sourceType":"module"}